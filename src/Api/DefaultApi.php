<?php
/**
 * DefaultApi
 * PHP version 8.1
 *
 * @package  EpicKitty\Ras
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management API
 *
 * API that provides management functionality for Retro AIM Server operators.
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EpicKitty\Ras\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use EpicKitty\Ras\ApiException;
use EpicKitty\Ras\Configuration;
use EpicKitty\Ras\HeaderSelector;
use EpicKitty\Ras\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @package  EpicKitty\Ras
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'chatRoomPrivateGet' => [
            'application/json',
        ],
        'chatRoomPublicGet' => [
            'application/json',
        ],
        'chatRoomPublicPost' => [
            'application/json',
        ],
        'directoryCategoryGet' => [
            'application/json',
        ],
        'directoryCategoryIdDelete' => [
            'application/json',
        ],
        'directoryCategoryIdKeywordGet' => [
            'application/json',
        ],
        'directoryCategoryPost' => [
            'application/json',
        ],
        'directoryKeywordIdDelete' => [
            'application/json',
        ],
        'directoryKeywordPost' => [
            'application/json',
        ],
        'instantMessagePost' => [
            'application/json',
        ],
        'sessionGet' => [
            'application/json',
        ],
        'sessionScreennameDelete' => [
            'application/json',
        ],
        'sessionScreennameGet' => [
            'application/json',
        ],
        'userDelete' => [
            'application/json',
        ],
        'userGet' => [
            'application/json',
        ],
        'userPasswordPut' => [
            'application/json',
        ],
        'userPost' => [
            'application/json',
        ],
        'userScreennameAccountGet' => [
            'application/json',
        ],
        'userScreennameAccountPatch' => [
            'application/json',
        ],
        'userScreennameIconGet' => [
            'application/json',
        ],
        'versionGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation chatRoomPrivateGet
     *
     * List all private AIM chat rooms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPrivateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\ChatRoomPrivateGet200ResponseInner[]
     */
    public function chatRoomPrivateGet(
        string $contentType = self::contentTypes['chatRoomPrivateGet'][0]
    ): array
    {
        list($response) = $this->chatRoomPrivateGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation chatRoomPrivateGetWithHttpInfo
     *
     * List all private AIM chat rooms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPrivateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\ChatRoomPrivateGet200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function chatRoomPrivateGetWithHttpInfo(
        string $contentType = self::contentTypes['chatRoomPrivateGet'][0]
    ): array
    {
        $request = $this->chatRoomPrivateGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\ChatRoomPrivateGet200ResponseInner[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\ChatRoomPrivateGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\ChatRoomPrivateGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\ChatRoomPrivateGet200ResponseInner[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\ChatRoomPrivateGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatRoomPrivateGetAsync
     *
     * List all private AIM chat rooms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPrivateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function chatRoomPrivateGetAsync(
        string $contentType = self::contentTypes['chatRoomPrivateGet'][0]
    ): PromiseInterface
    {
        return $this->chatRoomPrivateGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatRoomPrivateGetAsyncWithHttpInfo
     *
     * List all private AIM chat rooms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPrivateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function chatRoomPrivateGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['chatRoomPrivateGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\ChatRoomPrivateGet200ResponseInner[]';
        $request = $this->chatRoomPrivateGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatRoomPrivateGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPrivateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatRoomPrivateGetRequest(
        string $contentType = self::contentTypes['chatRoomPrivateGet'][0]
    ): Request
    {


        $resourcePath = '/chat/room/private';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatRoomPublicGet
     *
     * List all public AIM chat rooms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\ChatRoomPublicGet200ResponseInner[]
     */
    public function chatRoomPublicGet(
        string $contentType = self::contentTypes['chatRoomPublicGet'][0]
    ): array
    {
        list($response) = $this->chatRoomPublicGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation chatRoomPublicGetWithHttpInfo
     *
     * List all public AIM chat rooms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\ChatRoomPublicGet200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function chatRoomPublicGetWithHttpInfo(
        string $contentType = self::contentTypes['chatRoomPublicGet'][0]
    ): array
    {
        $request = $this->chatRoomPublicGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\ChatRoomPublicGet200ResponseInner[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\ChatRoomPublicGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\ChatRoomPublicGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\ChatRoomPublicGet200ResponseInner[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\ChatRoomPublicGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatRoomPublicGetAsync
     *
     * List all public AIM chat rooms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function chatRoomPublicGetAsync(
        string $contentType = self::contentTypes['chatRoomPublicGet'][0]
    ): PromiseInterface
    {
        return $this->chatRoomPublicGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatRoomPublicGetAsyncWithHttpInfo
     *
     * List all public AIM chat rooms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function chatRoomPublicGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['chatRoomPublicGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\ChatRoomPublicGet200ResponseInner[]';
        $request = $this->chatRoomPublicGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatRoomPublicGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatRoomPublicGetRequest(
        string $contentType = self::contentTypes['chatRoomPublicGet'][0]
    ): Request
    {


        $resourcePath = '/chat/room/public';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatRoomPublicPost
     *
     * Create a new public chat room
     *
     * @param  \EpicKitty\Ras\Model\ChatRoomPublicPostRequest $chatRoomPublicPostRequest chatRoomPublicPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function chatRoomPublicPost(
        \EpicKitty\Ras\Model\ChatRoomPublicPostRequest $chatRoomPublicPostRequest,
        string $contentType = self::contentTypes['chatRoomPublicPost'][0]
    ): void
    {
        $this->chatRoomPublicPostWithHttpInfo($chatRoomPublicPostRequest, $contentType);
    }

    /**
     * Operation chatRoomPublicPostWithHttpInfo
     *
     * Create a new public chat room
     *
     * @param  \EpicKitty\Ras\Model\ChatRoomPublicPostRequest $chatRoomPublicPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatRoomPublicPostWithHttpInfo(
        \EpicKitty\Ras\Model\ChatRoomPublicPostRequest $chatRoomPublicPostRequest,
        string $contentType = self::contentTypes['chatRoomPublicPost'][0]
    ): array
    {
        $request = $this->chatRoomPublicPostRequest($chatRoomPublicPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation chatRoomPublicPostAsync
     *
     * Create a new public chat room
     *
     * @param  \EpicKitty\Ras\Model\ChatRoomPublicPostRequest $chatRoomPublicPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function chatRoomPublicPostAsync(
        \EpicKitty\Ras\Model\ChatRoomPublicPostRequest $chatRoomPublicPostRequest,
        string $contentType = self::contentTypes['chatRoomPublicPost'][0]
    ): PromiseInterface
    {
        return $this->chatRoomPublicPostAsyncWithHttpInfo($chatRoomPublicPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatRoomPublicPostAsyncWithHttpInfo
     *
     * Create a new public chat room
     *
     * @param  \EpicKitty\Ras\Model\ChatRoomPublicPostRequest $chatRoomPublicPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function chatRoomPublicPostAsyncWithHttpInfo(
        $chatRoomPublicPostRequest,
        string $contentType = self::contentTypes['chatRoomPublicPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->chatRoomPublicPostRequest($chatRoomPublicPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatRoomPublicPost'
     *
     * @param  \EpicKitty\Ras\Model\ChatRoomPublicPostRequest $chatRoomPublicPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatRoomPublicPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatRoomPublicPostRequest(
        $chatRoomPublicPostRequest,
        string $contentType = self::contentTypes['chatRoomPublicPost'][0]
    ): Request
    {

        // verify the required parameter 'chatRoomPublicPostRequest' is set
        if ($chatRoomPublicPostRequest === null || (is_array($chatRoomPublicPostRequest) && count($chatRoomPublicPostRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $chatRoomPublicPostRequest when calling chatRoomPublicPost'
            );
        }


        $resourcePath = '/chat/room/public';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($chatRoomPublicPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($chatRoomPublicPostRequest));
            } else {
                $httpBody = $chatRoomPublicPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directoryCategoryGet
     *
     * Get all keyword categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\DirectoryCategoryGet200ResponseInner[]
     */
    public function directoryCategoryGet(
        string $contentType = self::contentTypes['directoryCategoryGet'][0]
    ): array
    {
        list($response) = $this->directoryCategoryGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation directoryCategoryGetWithHttpInfo
     *
     * Get all keyword categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\DirectoryCategoryGet200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function directoryCategoryGetWithHttpInfo(
        string $contentType = self::contentTypes['directoryCategoryGet'][0]
    ): array
    {
        $request = $this->directoryCategoryGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryGet200ResponseInner[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\DirectoryCategoryGet200ResponseInner[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directoryCategoryGetAsync
     *
     * Get all keyword categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryCategoryGetAsync(
        string $contentType = self::contentTypes['directoryCategoryGet'][0]
    ): PromiseInterface
    {
        return $this->directoryCategoryGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directoryCategoryGetAsyncWithHttpInfo
     *
     * Get all keyword categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryCategoryGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['directoryCategoryGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\DirectoryCategoryGet200ResponseInner[]';
        $request = $this->directoryCategoryGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directoryCategoryGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directoryCategoryGetRequest(
        string $contentType = self::contentTypes['directoryCategoryGet'][0]
    ): Request
    {


        $resourcePath = '/directory/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directoryCategoryIdDelete
     *
     * Delete a keyword category
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function directoryCategoryIdDelete(
        int $id,
        string $contentType = self::contentTypes['directoryCategoryIdDelete'][0]
    ): void
    {
        $this->directoryCategoryIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation directoryCategoryIdDeleteWithHttpInfo
     *
     * Delete a keyword category
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function directoryCategoryIdDeleteWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['directoryCategoryIdDelete'][0]
    ): array
    {
        $request = $this->directoryCategoryIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directoryCategoryIdDeleteAsync
     *
     * Delete a keyword category
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryCategoryIdDeleteAsync(
        int $id,
        string $contentType = self::contentTypes['directoryCategoryIdDelete'][0]
    ): PromiseInterface
    {
        return $this->directoryCategoryIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directoryCategoryIdDeleteAsyncWithHttpInfo
     *
     * Delete a keyword category
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryCategoryIdDeleteAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['directoryCategoryIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->directoryCategoryIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directoryCategoryIdDelete'
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directoryCategoryIdDeleteRequest(
        $id,
        string $contentType = self::contentTypes['directoryCategoryIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling directoryCategoryIdDelete'
            );
        }


        $resourcePath = '/directory/category/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directoryCategoryIdKeywordGet
     *
     * Get all keywords in a category
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdKeywordGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\DirectoryCategoryIdKeywordGet200ResponseInner[]|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response
     */
    public function directoryCategoryIdKeywordGet(
        int $id,
        string $contentType = self::contentTypes['directoryCategoryIdKeywordGet'][0]
    ): array
    {
        list($response) = $this->directoryCategoryIdKeywordGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation directoryCategoryIdKeywordGetWithHttpInfo
     *
     * Get all keywords in a category
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdKeywordGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\DirectoryCategoryIdKeywordGet200ResponseInner[]|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function directoryCategoryIdKeywordGetWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['directoryCategoryIdKeywordGet'][0]
    ): array
    {
        $request = $this->directoryCategoryIdKeywordGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryIdKeywordGet200ResponseInner[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryIdKeywordGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryIdKeywordGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\DirectoryCategoryIdKeywordGet200ResponseInner[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryIdKeywordGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directoryCategoryIdKeywordGetAsync
     *
     * Get all keywords in a category
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdKeywordGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryCategoryIdKeywordGetAsync(
        int $id,
        string $contentType = self::contentTypes['directoryCategoryIdKeywordGet'][0]
    ): PromiseInterface
    {
        return $this->directoryCategoryIdKeywordGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directoryCategoryIdKeywordGetAsyncWithHttpInfo
     *
     * Get all keywords in a category
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdKeywordGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryCategoryIdKeywordGetAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['directoryCategoryIdKeywordGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\DirectoryCategoryIdKeywordGet200ResponseInner[]';
        $request = $this->directoryCategoryIdKeywordGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directoryCategoryIdKeywordGet'
     *
     * @param  int $id The ID of the keyword category. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryIdKeywordGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directoryCategoryIdKeywordGetRequest(
        $id,
        string $contentType = self::contentTypes['directoryCategoryIdKeywordGet'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling directoryCategoryIdKeywordGet'
            );
        }


        $resourcePath = '/directory/category/{id}/keyword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directoryCategoryPost
     *
     * Create a new keyword category
     *
     * @param  \EpicKitty\Ras\Model\DirectoryCategoryPostRequest $directoryCategoryPostRequest directoryCategoryPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\DirectoryCategoryPost201Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response
     */
    public function directoryCategoryPost(
        \EpicKitty\Ras\Model\DirectoryCategoryPostRequest $directoryCategoryPostRequest,
        string $contentType = self::contentTypes['directoryCategoryPost'][0]
    ): \EpicKitty\Ras\Model\DirectoryCategoryPost201Response
    {
        list($response) = $this->directoryCategoryPostWithHttpInfo($directoryCategoryPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation directoryCategoryPostWithHttpInfo
     *
     * Create a new keyword category
     *
     * @param  \EpicKitty\Ras\Model\DirectoryCategoryPostRequest $directoryCategoryPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\DirectoryCategoryPost201Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function directoryCategoryPostWithHttpInfo(
        \EpicKitty\Ras\Model\DirectoryCategoryPostRequest $directoryCategoryPostRequest,
        string $contentType = self::contentTypes['directoryCategoryPost'][0]
    ): array
    {
        $request = $this->directoryCategoryPostRequest($directoryCategoryPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryPost201Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryPost201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryPost201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\DirectoryCategoryPost201Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directoryCategoryPostAsync
     *
     * Create a new keyword category
     *
     * @param  \EpicKitty\Ras\Model\DirectoryCategoryPostRequest $directoryCategoryPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryCategoryPostAsync(
        \EpicKitty\Ras\Model\DirectoryCategoryPostRequest $directoryCategoryPostRequest,
        string $contentType = self::contentTypes['directoryCategoryPost'][0]
    ): PromiseInterface
    {
        return $this->directoryCategoryPostAsyncWithHttpInfo($directoryCategoryPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directoryCategoryPostAsyncWithHttpInfo
     *
     * Create a new keyword category
     *
     * @param  \EpicKitty\Ras\Model\DirectoryCategoryPostRequest $directoryCategoryPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryCategoryPostAsyncWithHttpInfo(
        $directoryCategoryPostRequest,
        string $contentType = self::contentTypes['directoryCategoryPost'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\DirectoryCategoryPost201Response';
        $request = $this->directoryCategoryPostRequest($directoryCategoryPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directoryCategoryPost'
     *
     * @param  \EpicKitty\Ras\Model\DirectoryCategoryPostRequest $directoryCategoryPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryCategoryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directoryCategoryPostRequest(
        $directoryCategoryPostRequest,
        string $contentType = self::contentTypes['directoryCategoryPost'][0]
    ): Request
    {

        // verify the required parameter 'directoryCategoryPostRequest' is set
        if ($directoryCategoryPostRequest === null || (is_array($directoryCategoryPostRequest) && count($directoryCategoryPostRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $directoryCategoryPostRequest when calling directoryCategoryPost'
            );
        }


        $resourcePath = '/directory/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($directoryCategoryPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($directoryCategoryPostRequest));
            } else {
                $httpBody = $directoryCategoryPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directoryKeywordIdDelete
     *
     * Delete a keyword
     *
     * @param  int $id The ID of the keyword. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function directoryKeywordIdDelete(
        int $id,
        string $contentType = self::contentTypes['directoryKeywordIdDelete'][0]
    ): void
    {
        $this->directoryKeywordIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation directoryKeywordIdDeleteWithHttpInfo
     *
     * Delete a keyword
     *
     * @param  int $id The ID of the keyword. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function directoryKeywordIdDeleteWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['directoryKeywordIdDelete'][0]
    ): array
    {
        $request = $this->directoryKeywordIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directoryKeywordIdDeleteAsync
     *
     * Delete a keyword
     *
     * @param  int $id The ID of the keyword. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryKeywordIdDeleteAsync(
        int $id,
        string $contentType = self::contentTypes['directoryKeywordIdDelete'][0]
    ): PromiseInterface
    {
        return $this->directoryKeywordIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directoryKeywordIdDeleteAsyncWithHttpInfo
     *
     * Delete a keyword
     *
     * @param  int $id The ID of the keyword. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryKeywordIdDeleteAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['directoryKeywordIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->directoryKeywordIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directoryKeywordIdDelete'
     *
     * @param  int $id The ID of the keyword. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directoryKeywordIdDeleteRequest(
        $id,
        string $contentType = self::contentTypes['directoryKeywordIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling directoryKeywordIdDelete'
            );
        }


        $resourcePath = '/directory/keyword/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directoryKeywordPost
     *
     * Create a new keyword.
     *
     * @param  \EpicKitty\Ras\Model\DirectoryKeywordPostRequest $directoryKeywordPostRequest directoryKeywordPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\DirectoryKeywordPost201Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response
     */
    public function directoryKeywordPost(
        \EpicKitty\Ras\Model\DirectoryKeywordPostRequest $directoryKeywordPostRequest,
        string $contentType = self::contentTypes['directoryKeywordPost'][0]
    ): \EpicKitty\Ras\Model\DirectoryKeywordPost201Response
    {
        list($response) = $this->directoryKeywordPostWithHttpInfo($directoryKeywordPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation directoryKeywordPostWithHttpInfo
     *
     * Create a new keyword.
     *
     * @param  \EpicKitty\Ras\Model\DirectoryKeywordPostRequest $directoryKeywordPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\DirectoryKeywordPost201Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response|\EpicKitty\Ras\Model\DirectoryCategoryPost400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function directoryKeywordPostWithHttpInfo(
        \EpicKitty\Ras\Model\DirectoryKeywordPostRequest $directoryKeywordPostRequest,
        string $contentType = self::contentTypes['directoryKeywordPost'][0]
    ): array
    {
        $request = $this->directoryKeywordPostRequest($directoryKeywordPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryKeywordPost201Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryKeywordPost201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryKeywordPost201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if (in_array('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\DirectoryCategoryPost400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\DirectoryKeywordPost201Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryKeywordPost201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\DirectoryCategoryPost400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directoryKeywordPostAsync
     *
     * Create a new keyword.
     *
     * @param  \EpicKitty\Ras\Model\DirectoryKeywordPostRequest $directoryKeywordPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryKeywordPostAsync(
        \EpicKitty\Ras\Model\DirectoryKeywordPostRequest $directoryKeywordPostRequest,
        string $contentType = self::contentTypes['directoryKeywordPost'][0]
    ): PromiseInterface
    {
        return $this->directoryKeywordPostAsyncWithHttpInfo($directoryKeywordPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directoryKeywordPostAsyncWithHttpInfo
     *
     * Create a new keyword.
     *
     * @param  \EpicKitty\Ras\Model\DirectoryKeywordPostRequest $directoryKeywordPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function directoryKeywordPostAsyncWithHttpInfo(
        $directoryKeywordPostRequest,
        string $contentType = self::contentTypes['directoryKeywordPost'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\DirectoryKeywordPost201Response';
        $request = $this->directoryKeywordPostRequest($directoryKeywordPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directoryKeywordPost'
     *
     * @param  \EpicKitty\Ras\Model\DirectoryKeywordPostRequest $directoryKeywordPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['directoryKeywordPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directoryKeywordPostRequest(
        $directoryKeywordPostRequest,
        string $contentType = self::contentTypes['directoryKeywordPost'][0]
    ): Request
    {

        // verify the required parameter 'directoryKeywordPostRequest' is set
        if ($directoryKeywordPostRequest === null || (is_array($directoryKeywordPostRequest) && count($directoryKeywordPostRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $directoryKeywordPostRequest when calling directoryKeywordPost'
            );
        }


        $resourcePath = '/directory/keyword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($directoryKeywordPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($directoryKeywordPostRequest));
            } else {
                $httpBody = $directoryKeywordPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instantMessagePost
     *
     * Send an instant message
     *
     * @param  \EpicKitty\Ras\Model\InstantMessagePostRequest $instantMessagePostRequest instantMessagePostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instantMessagePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function instantMessagePost(
        \EpicKitty\Ras\Model\InstantMessagePostRequest $instantMessagePostRequest,
        string $contentType = self::contentTypes['instantMessagePost'][0]
    ): void
    {
        $this->instantMessagePostWithHttpInfo($instantMessagePostRequest, $contentType);
    }

    /**
     * Operation instantMessagePostWithHttpInfo
     *
     * Send an instant message
     *
     * @param  \EpicKitty\Ras\Model\InstantMessagePostRequest $instantMessagePostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instantMessagePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function instantMessagePostWithHttpInfo(
        \EpicKitty\Ras\Model\InstantMessagePostRequest $instantMessagePostRequest,
        string $contentType = self::contentTypes['instantMessagePost'][0]
    ): array
    {
        $request = $this->instantMessagePostRequest($instantMessagePostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation instantMessagePostAsync
     *
     * Send an instant message
     *
     * @param  \EpicKitty\Ras\Model\InstantMessagePostRequest $instantMessagePostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instantMessagePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function instantMessagePostAsync(
        \EpicKitty\Ras\Model\InstantMessagePostRequest $instantMessagePostRequest,
        string $contentType = self::contentTypes['instantMessagePost'][0]
    ): PromiseInterface
    {
        return $this->instantMessagePostAsyncWithHttpInfo($instantMessagePostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instantMessagePostAsyncWithHttpInfo
     *
     * Send an instant message
     *
     * @param  \EpicKitty\Ras\Model\InstantMessagePostRequest $instantMessagePostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instantMessagePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function instantMessagePostAsyncWithHttpInfo(
        $instantMessagePostRequest,
        string $contentType = self::contentTypes['instantMessagePost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->instantMessagePostRequest($instantMessagePostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instantMessagePost'
     *
     * @param  \EpicKitty\Ras\Model\InstantMessagePostRequest $instantMessagePostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instantMessagePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instantMessagePostRequest(
        $instantMessagePostRequest,
        string $contentType = self::contentTypes['instantMessagePost'][0]
    ): Request
    {

        // verify the required parameter 'instantMessagePostRequest' is set
        if ($instantMessagePostRequest === null || (is_array($instantMessagePostRequest) && count($instantMessagePostRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $instantMessagePostRequest when calling instantMessagePost'
            );
        }


        $resourcePath = '/instant-message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($instantMessagePostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($instantMessagePostRequest));
            } else {
                $httpBody = $instantMessagePostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sessionGet
     *
     * Get active sessions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\SessionGet200Response
     */
    public function sessionGet(
        string $contentType = self::contentTypes['sessionGet'][0]
    ): \EpicKitty\Ras\Model\SessionGet200Response
    {
        list($response) = $this->sessionGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation sessionGetWithHttpInfo
     *
     * Get active sessions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\SessionGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function sessionGetWithHttpInfo(
        string $contentType = self::contentTypes['sessionGet'][0]
    ): array
    {
        $request = $this->sessionGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\SessionGet200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\SessionGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\SessionGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\SessionGet200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\SessionGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sessionGetAsync
     *
     * Get active sessions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sessionGetAsync(
        string $contentType = self::contentTypes['sessionGet'][0]
    ): PromiseInterface
    {
        return $this->sessionGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sessionGetAsyncWithHttpInfo
     *
     * Get active sessions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sessionGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['sessionGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\SessionGet200Response';
        $request = $this->sessionGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sessionGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sessionGetRequest(
        string $contentType = self::contentTypes['sessionGet'][0]
    ): Request
    {


        $resourcePath = '/session';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sessionScreennameDelete
     *
     * Delete active sessions for a given screen name or UIN.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function sessionScreennameDelete(
        string $screenname,
        string $contentType = self::contentTypes['sessionScreennameDelete'][0]
    ): void
    {
        $this->sessionScreennameDeleteWithHttpInfo($screenname, $contentType);
    }

    /**
     * Operation sessionScreennameDeleteWithHttpInfo
     *
     * Delete active sessions for a given screen name or UIN.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sessionScreennameDeleteWithHttpInfo(
        string $screenname,
        string $contentType = self::contentTypes['sessionScreennameDelete'][0]
    ): array
    {
        $request = $this->sessionScreennameDeleteRequest($screenname, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sessionScreennameDeleteAsync
     *
     * Delete active sessions for a given screen name or UIN.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sessionScreennameDeleteAsync(
        string $screenname,
        string $contentType = self::contentTypes['sessionScreennameDelete'][0]
    ): PromiseInterface
    {
        return $this->sessionScreennameDeleteAsyncWithHttpInfo($screenname, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sessionScreennameDeleteAsyncWithHttpInfo
     *
     * Delete active sessions for a given screen name or UIN.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sessionScreennameDeleteAsyncWithHttpInfo(
        $screenname,
        string $contentType = self::contentTypes['sessionScreennameDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->sessionScreennameDeleteRequest($screenname, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sessionScreennameDelete'
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sessionScreennameDeleteRequest(
        $screenname,
        string $contentType = self::contentTypes['sessionScreennameDelete'][0]
    ): Request
    {

        // verify the required parameter 'screenname' is set
        if ($screenname === null || (is_array($screenname) && count($screenname) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $screenname when calling sessionScreennameDelete'
            );
        }


        $resourcePath = '/session/{screenname}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($screenname !== null) {
            $resourcePath = str_replace(
                '{' . 'screenname' . '}',
                ObjectSerializer::toPathValue($screenname),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sessionScreennameGet
     *
     * Get active sessions for a given screen name or UIN.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\SessionGet200Response
     */
    public function sessionScreennameGet(
        string $screenname,
        string $contentType = self::contentTypes['sessionScreennameGet'][0]
    ): \EpicKitty\Ras\Model\SessionGet200Response
    {
        list($response) = $this->sessionScreennameGetWithHttpInfo($screenname, $contentType);
        return $response;
    }

    /**
     * Operation sessionScreennameGetWithHttpInfo
     *
     * Get active sessions for a given screen name or UIN.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\SessionGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function sessionScreennameGetWithHttpInfo(
        string $screenname,
        string $contentType = self::contentTypes['sessionScreennameGet'][0]
    ): array
    {
        $request = $this->sessionScreennameGetRequest($screenname, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\SessionGet200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\SessionGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\SessionGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\SessionGet200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\SessionGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sessionScreennameGetAsync
     *
     * Get active sessions for a given screen name or UIN.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sessionScreennameGetAsync(
        string $screenname,
        string $contentType = self::contentTypes['sessionScreennameGet'][0]
    ): PromiseInterface
    {
        return $this->sessionScreennameGetAsyncWithHttpInfo($screenname, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sessionScreennameGetAsyncWithHttpInfo
     *
     * Get active sessions for a given screen name or UIN.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sessionScreennameGetAsyncWithHttpInfo(
        $screenname,
        string $contentType = self::contentTypes['sessionScreennameGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\SessionGet200Response';
        $request = $this->sessionScreennameGetRequest($screenname, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sessionScreennameGet'
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sessionScreennameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sessionScreennameGetRequest(
        $screenname,
        string $contentType = self::contentTypes['sessionScreennameGet'][0]
    ): Request
    {

        // verify the required parameter 'screenname' is set
        if ($screenname === null || (is_array($screenname) && count($screenname) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $screenname when calling sessionScreennameGet'
            );
        }


        $resourcePath = '/session/{screenname}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($screenname !== null) {
            $resourcePath = str_replace(
                '{' . 'screenname' . '}',
                ObjectSerializer::toPathValue($screenname),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDelete
     *
     * Delete a user
     *
     * @param  \EpicKitty\Ras\Model\UserDeleteRequest $userDeleteRequest userDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function userDelete(
        \EpicKitty\Ras\Model\UserDeleteRequest $userDeleteRequest,
        string $contentType = self::contentTypes['userDelete'][0]
    ): void
    {
        $this->userDeleteWithHttpInfo($userDeleteRequest, $contentType);
    }

    /**
     * Operation userDeleteWithHttpInfo
     *
     * Delete a user
     *
     * @param  \EpicKitty\Ras\Model\UserDeleteRequest $userDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDeleteWithHttpInfo(
        \EpicKitty\Ras\Model\UserDeleteRequest $userDeleteRequest,
        string $contentType = self::contentTypes['userDelete'][0]
    ): array
    {
        $request = $this->userDeleteRequest($userDeleteRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userDeleteAsync
     *
     * Delete a user
     *
     * @param  \EpicKitty\Ras\Model\UserDeleteRequest $userDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userDeleteAsync(
        \EpicKitty\Ras\Model\UserDeleteRequest $userDeleteRequest,
        string $contentType = self::contentTypes['userDelete'][0]
    ): PromiseInterface
    {
        return $this->userDeleteAsyncWithHttpInfo($userDeleteRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDeleteAsyncWithHttpInfo
     *
     * Delete a user
     *
     * @param  \EpicKitty\Ras\Model\UserDeleteRequest $userDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userDeleteAsyncWithHttpInfo(
        $userDeleteRequest,
        string $contentType = self::contentTypes['userDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->userDeleteRequest($userDeleteRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDelete'
     *
     * @param  \EpicKitty\Ras\Model\UserDeleteRequest $userDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userDeleteRequest(
        $userDeleteRequest,
        string $contentType = self::contentTypes['userDelete'][0]
    ): Request
    {

        // verify the required parameter 'userDeleteRequest' is set
        if ($userDeleteRequest === null || (is_array($userDeleteRequest) && count($userDeleteRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userDeleteRequest when calling userDelete'
            );
        }


        $resourcePath = '/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userDeleteRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userDeleteRequest));
            } else {
                $httpBody = $userDeleteRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userGet
     *
     * Get all users
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\UserGet200ResponseInner[]
     */
    public function userGet(
        string $contentType = self::contentTypes['userGet'][0]
    ): array
    {
        list($response) = $this->userGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation userGetWithHttpInfo
     *
     * Get all users
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\UserGet200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userGetWithHttpInfo(
        string $contentType = self::contentTypes['userGet'][0]
    ): array
    {
        $request = $this->userGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\UserGet200ResponseInner[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\UserGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\UserGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\UserGet200ResponseInner[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\UserGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userGetAsync
     *
     * Get all users
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userGetAsync(
        string $contentType = self::contentTypes['userGet'][0]
    ): PromiseInterface
    {
        return $this->userGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userGetAsyncWithHttpInfo
     *
     * Get all users
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['userGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\UserGet200ResponseInner[]';
        $request = $this->userGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userGetRequest(
        string $contentType = self::contentTypes['userGet'][0]
    ): Request
    {


        $resourcePath = '/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userPasswordPut
     *
     * Set a user&#39;s password
     *
     * @param  \EpicKitty\Ras\Model\UserPasswordPutRequest $userPasswordPutRequest userPasswordPutRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPasswordPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function userPasswordPut(
        \EpicKitty\Ras\Model\UserPasswordPutRequest $userPasswordPutRequest,
        string $contentType = self::contentTypes['userPasswordPut'][0]
    ): void
    {
        $this->userPasswordPutWithHttpInfo($userPasswordPutRequest, $contentType);
    }

    /**
     * Operation userPasswordPutWithHttpInfo
     *
     * Set a user&#39;s password
     *
     * @param  \EpicKitty\Ras\Model\UserPasswordPutRequest $userPasswordPutRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPasswordPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userPasswordPutWithHttpInfo(
        \EpicKitty\Ras\Model\UserPasswordPutRequest $userPasswordPutRequest,
        string $contentType = self::contentTypes['userPasswordPut'][0]
    ): array
    {
        $request = $this->userPasswordPutRequest($userPasswordPutRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userPasswordPutAsync
     *
     * Set a user&#39;s password
     *
     * @param  \EpicKitty\Ras\Model\UserPasswordPutRequest $userPasswordPutRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPasswordPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userPasswordPutAsync(
        \EpicKitty\Ras\Model\UserPasswordPutRequest $userPasswordPutRequest,
        string $contentType = self::contentTypes['userPasswordPut'][0]
    ): PromiseInterface
    {
        return $this->userPasswordPutAsyncWithHttpInfo($userPasswordPutRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userPasswordPutAsyncWithHttpInfo
     *
     * Set a user&#39;s password
     *
     * @param  \EpicKitty\Ras\Model\UserPasswordPutRequest $userPasswordPutRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPasswordPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userPasswordPutAsyncWithHttpInfo(
        $userPasswordPutRequest,
        string $contentType = self::contentTypes['userPasswordPut'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->userPasswordPutRequest($userPasswordPutRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userPasswordPut'
     *
     * @param  \EpicKitty\Ras\Model\UserPasswordPutRequest $userPasswordPutRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPasswordPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userPasswordPutRequest(
        $userPasswordPutRequest,
        string $contentType = self::contentTypes['userPasswordPut'][0]
    ): Request
    {

        // verify the required parameter 'userPasswordPutRequest' is set
        if ($userPasswordPutRequest === null || (is_array($userPasswordPutRequest) && count($userPasswordPutRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userPasswordPutRequest when calling userPasswordPut'
            );
        }


        $resourcePath = '/user/password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userPasswordPutRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userPasswordPutRequest));
            } else {
                $httpBody = $userPasswordPutRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userPost
     *
     * Create a new user
     *
     * @param  \EpicKitty\Ras\Model\UserPostRequest $userPostRequest userPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function userPost(
        \EpicKitty\Ras\Model\UserPostRequest $userPostRequest,
        string $contentType = self::contentTypes['userPost'][0]
    ): void
    {
        $this->userPostWithHttpInfo($userPostRequest, $contentType);
    }

    /**
     * Operation userPostWithHttpInfo
     *
     * Create a new user
     *
     * @param  \EpicKitty\Ras\Model\UserPostRequest $userPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userPostWithHttpInfo(
        \EpicKitty\Ras\Model\UserPostRequest $userPostRequest,
        string $contentType = self::contentTypes['userPost'][0]
    ): array
    {
        $request = $this->userPostRequest($userPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userPostAsync
     *
     * Create a new user
     *
     * @param  \EpicKitty\Ras\Model\UserPostRequest $userPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userPostAsync(
        \EpicKitty\Ras\Model\UserPostRequest $userPostRequest,
        string $contentType = self::contentTypes['userPost'][0]
    ): PromiseInterface
    {
        return $this->userPostAsyncWithHttpInfo($userPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userPostAsyncWithHttpInfo
     *
     * Create a new user
     *
     * @param  \EpicKitty\Ras\Model\UserPostRequest $userPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userPostAsyncWithHttpInfo(
        $userPostRequest,
        string $contentType = self::contentTypes['userPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->userPostRequest($userPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userPost'
     *
     * @param  \EpicKitty\Ras\Model\UserPostRequest $userPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userPostRequest(
        $userPostRequest,
        string $contentType = self::contentTypes['userPost'][0]
    ): Request
    {

        // verify the required parameter 'userPostRequest' is set
        if ($userPostRequest === null || (is_array($userPostRequest) && count($userPostRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userPostRequest when calling userPost'
            );
        }


        $resourcePath = '/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userPostRequest));
            } else {
                $httpBody = $userPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userScreennameAccountGet
     *
     * Get account details for a specific screen name.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\UserScreennameAccountGet200Response
     */
    public function userScreennameAccountGet(
        string $screenname,
        string $contentType = self::contentTypes['userScreennameAccountGet'][0]
    ): \EpicKitty\Ras\Model\UserScreennameAccountGet200Response
    {
        list($response) = $this->userScreennameAccountGetWithHttpInfo($screenname, $contentType);
        return $response;
    }

    /**
     * Operation userScreennameAccountGetWithHttpInfo
     *
     * Get account details for a specific screen name.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\UserScreennameAccountGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function userScreennameAccountGetWithHttpInfo(
        string $screenname,
        string $contentType = self::contentTypes['userScreennameAccountGet'][0]
    ): array
    {
        $request = $this->userScreennameAccountGetRequest($screenname, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\UserScreennameAccountGet200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\UserScreennameAccountGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\UserScreennameAccountGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\UserScreennameAccountGet200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\UserScreennameAccountGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userScreennameAccountGetAsync
     *
     * Get account details for a specific screen name.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userScreennameAccountGetAsync(
        string $screenname,
        string $contentType = self::contentTypes['userScreennameAccountGet'][0]
    ): PromiseInterface
    {
        return $this->userScreennameAccountGetAsyncWithHttpInfo($screenname, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userScreennameAccountGetAsyncWithHttpInfo
     *
     * Get account details for a specific screen name.
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userScreennameAccountGetAsyncWithHttpInfo(
        $screenname,
        string $contentType = self::contentTypes['userScreennameAccountGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\UserScreennameAccountGet200Response';
        $request = $this->userScreennameAccountGetRequest($screenname, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userScreennameAccountGet'
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userScreennameAccountGetRequest(
        $screenname,
        string $contentType = self::contentTypes['userScreennameAccountGet'][0]
    ): Request
    {

        // verify the required parameter 'screenname' is set
        if ($screenname === null || (is_array($screenname) && count($screenname) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $screenname when calling userScreennameAccountGet'
            );
        }


        $resourcePath = '/user/{screenname}/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($screenname !== null) {
            $resourcePath = str_replace(
                '{' . 'screenname' . '}',
                ObjectSerializer::toPathValue($screenname),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userScreennameAccountPatch
     *
     * Update a user account
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  \EpicKitty\Ras\Model\UserScreennameAccountPatchRequest $userScreennameAccountPatchRequest userScreennameAccountPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function userScreennameAccountPatch(
        string $screenname,
        \EpicKitty\Ras\Model\UserScreennameAccountPatchRequest $userScreennameAccountPatchRequest,
        string $contentType = self::contentTypes['userScreennameAccountPatch'][0]
    ): void
    {
        $this->userScreennameAccountPatchWithHttpInfo($screenname, $userScreennameAccountPatchRequest, $contentType);
    }

    /**
     * Operation userScreennameAccountPatchWithHttpInfo
     *
     * Update a user account
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  \EpicKitty\Ras\Model\UserScreennameAccountPatchRequest $userScreennameAccountPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userScreennameAccountPatchWithHttpInfo(
        string $screenname,
        \EpicKitty\Ras\Model\UserScreennameAccountPatchRequest $userScreennameAccountPatchRequest,
        string $contentType = self::contentTypes['userScreennameAccountPatch'][0]
    ): array
    {
        $request = $this->userScreennameAccountPatchRequest($screenname, $userScreennameAccountPatchRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userScreennameAccountPatchAsync
     *
     * Update a user account
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  \EpicKitty\Ras\Model\UserScreennameAccountPatchRequest $userScreennameAccountPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userScreennameAccountPatchAsync(
        string $screenname,
        \EpicKitty\Ras\Model\UserScreennameAccountPatchRequest $userScreennameAccountPatchRequest,
        string $contentType = self::contentTypes['userScreennameAccountPatch'][0]
    ): PromiseInterface
    {
        return $this->userScreennameAccountPatchAsyncWithHttpInfo($screenname, $userScreennameAccountPatchRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userScreennameAccountPatchAsyncWithHttpInfo
     *
     * Update a user account
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  \EpicKitty\Ras\Model\UserScreennameAccountPatchRequest $userScreennameAccountPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userScreennameAccountPatchAsyncWithHttpInfo(
        $screenname,
        $userScreennameAccountPatchRequest,
        string $contentType = self::contentTypes['userScreennameAccountPatch'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->userScreennameAccountPatchRequest($screenname, $userScreennameAccountPatchRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userScreennameAccountPatch'
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  \EpicKitty\Ras\Model\UserScreennameAccountPatchRequest $userScreennameAccountPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameAccountPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userScreennameAccountPatchRequest(
        $screenname,
        $userScreennameAccountPatchRequest,
        string $contentType = self::contentTypes['userScreennameAccountPatch'][0]
    ): Request
    {

        // verify the required parameter 'screenname' is set
        if ($screenname === null || (is_array($screenname) && count($screenname) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $screenname when calling userScreennameAccountPatch'
            );
        }

        // verify the required parameter 'userScreennameAccountPatchRequest' is set
        if ($userScreennameAccountPatchRequest === null || (is_array($userScreennameAccountPatchRequest) && count($userScreennameAccountPatchRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $userScreennameAccountPatchRequest when calling userScreennameAccountPatch'
            );
        }


        $resourcePath = '/user/{screenname}/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($screenname !== null) {
            $resourcePath = str_replace(
                '{' . 'screenname' . '}',
                ObjectSerializer::toPathValue($screenname),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userScreennameAccountPatchRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userScreennameAccountPatchRequest));
            } else {
                $httpBody = $userScreennameAccountPatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userScreennameIconGet
     *
     * Get AIM buddy icon for a screen name
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameIconGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SplFileObject
     */
    public function userScreennameIconGet(
        string $screenname,
        string $contentType = self::contentTypes['userScreennameIconGet'][0]
    ): \SplFileObject
    {
        list($response) = $this->userScreennameIconGetWithHttpInfo($screenname, $contentType);
        return $response;
    }

    /**
     * Operation userScreennameIconGetWithHttpInfo
     *
     * Get AIM buddy icon for a screen name
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameIconGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function userScreennameIconGetWithHttpInfo(
        string $screenname,
        string $contentType = self::contentTypes['userScreennameIconGet'][0]
    ): array
    {
        $request = $this->userScreennameIconGetRequest($screenname, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SplFileObject', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userScreennameIconGetAsync
     *
     * Get AIM buddy icon for a screen name
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameIconGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userScreennameIconGetAsync(
        string $screenname,
        string $contentType = self::contentTypes['userScreennameIconGet'][0]
    ): PromiseInterface
    {
        return $this->userScreennameIconGetAsyncWithHttpInfo($screenname, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userScreennameIconGetAsyncWithHttpInfo
     *
     * Get AIM buddy icon for a screen name
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameIconGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function userScreennameIconGetAsyncWithHttpInfo(
        $screenname,
        string $contentType = self::contentTypes['userScreennameIconGet'][0]
    ): PromiseInterface
    {
        $returnType = '\SplFileObject';
        $request = $this->userScreennameIconGetRequest($screenname, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userScreennameIconGet'
     *
     * @param  string $screenname User&#39;s AIM screen name or ICQ UIN. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userScreennameIconGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userScreennameIconGetRequest(
        $screenname,
        string $contentType = self::contentTypes['userScreennameIconGet'][0]
    ): Request
    {

        // verify the required parameter 'screenname' is set
        if ($screenname === null || (is_array($screenname) && count($screenname) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $screenname when calling userScreennameIconGet'
            );
        }


        $resourcePath = '/user/{screenname}/icon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($screenname !== null) {
            $resourcePath = str_replace(
                '{' . 'screenname' . '}',
                ObjectSerializer::toPathValue($screenname),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['image/gif', 'image/jpeg', 'image/png', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation versionGet
     *
     * Get build information of RAS.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['versionGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EpicKitty\Ras\Model\VersionGet200Response
     */
    public function versionGet(
        string $contentType = self::contentTypes['versionGet'][0]
    ): \EpicKitty\Ras\Model\VersionGet200Response
    {
        list($response) = $this->versionGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation versionGetWithHttpInfo
     *
     * Get build information of RAS.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['versionGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EpicKitty\Ras\Model\VersionGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function versionGetWithHttpInfo(
        string $contentType = self::contentTypes['versionGet'][0]
    ): array
    {
        $request = $this->versionGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\EpicKitty\Ras\Model\VersionGet200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EpicKitty\Ras\Model\VersionGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EpicKitty\Ras\Model\VersionGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\EpicKitty\Ras\Model\VersionGet200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EpicKitty\Ras\Model\VersionGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation versionGetAsync
     *
     * Get build information of RAS.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['versionGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function versionGetAsync(
        string $contentType = self::contentTypes['versionGet'][0]
    ): PromiseInterface
    {
        return $this->versionGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation versionGetAsyncWithHttpInfo
     *
     * Get build information of RAS.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['versionGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function versionGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['versionGet'][0]
    ): PromiseInterface
    {
        $returnType = '\EpicKitty\Ras\Model\VersionGet200Response';
        $request = $this->versionGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'versionGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['versionGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function versionGetRequest(
        string $contentType = self::contentTypes['versionGet'][0]
    ): Request
    {


        $resourcePath = '/version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
