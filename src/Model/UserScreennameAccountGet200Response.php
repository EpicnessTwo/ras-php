<?php
/**
 * UserScreennameAccountGet200Response
 *
 * PHP version 8.1
 *
 * @package  EpicKitty\Ras
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management API
 *
 * API that provides management functionality for Retro AIM Server operators.
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EpicKitty\Ras\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EpicKitty\Ras\ObjectSerializer;

/**
 * UserScreennameAccountGet200Response Class Doc Comment
 *
 * @package  EpicKitty\Ras
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UserScreennameAccountGet200Response implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_user__screenname__account_get_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'screenName' => 'string',
        'profile' => 'string',
        'emailAddress' => 'string',
        'confirmed' => 'bool',
        'isIcq' => 'bool',
        'suspendedStatus' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'screenName' => null,
        'profile' => null,
        'emailAddress' => null,
        'confirmed' => null,
        'isIcq' => null,
        'suspendedStatus' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'screenName' => false,
        'profile' => false,
        'emailAddress' => false,
        'confirmed' => false,
        'isIcq' => false,
        'suspendedStatus' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'screenName' => 'screen_name',
        'profile' => 'profile',
        'emailAddress' => 'email_address',
        'confirmed' => 'confirmed',
        'isIcq' => 'is_icq',
        'suspendedStatus' => 'suspended_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'screenName' => 'setScreenName',
        'profile' => 'setProfile',
        'emailAddress' => 'setEmailAddress',
        'confirmed' => 'setConfirmed',
        'isIcq' => 'setIsIcq',
        'suspendedStatus' => 'setSuspendedStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'screenName' => 'getScreenName',
        'profile' => 'getProfile',
        'emailAddress' => 'getEmailAddress',
        'confirmed' => 'getConfirmed',
        'isIcq' => 'getIsIcq',
        'suspendedStatus' => 'getSuspendedStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('screenName', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('emailAddress', $data ?? [], null);
        $this->setIfExists('confirmed', $data ?? [], null);
        $this->setIfExists('isIcq', $data ?? [], null);
        $this->setIfExists('suspendedStatus', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id User's unique identifier.
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets screenName
     *
     * @return string|null
     */
    public function getScreenName(): ?string
    {
        return $this->container['screenName'];
    }

    /**
     * Sets screenName
     *
     * @param string|null $screenName User's AIM screen name or ICQ UIN.
     *
     * @return $this
     */
    public function setScreenName(?string $screenName): static
    {
        if (is_null($screenName)) {
            throw new InvalidArgumentException('non-nullable screenName cannot be null');
        }
        $this->container['screenName'] = $screenName;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string|null
     */
    public function getProfile(): ?string
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string|null $profile User's AIM profile HTML.
     *
     * @return $this
     */
    public function setProfile(?string $profile): static
    {
        if (is_null($profile)) {
            throw new InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string|null
     */
    public function getEmailAddress(): ?string
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string|null $emailAddress User's email address
     *
     * @return $this
     */
    public function setEmailAddress(?string $emailAddress): static
    {
        if (is_null($emailAddress)) {
            throw new InvalidArgumentException('non-nullable emailAddress cannot be null');
        }
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool|null
     */
    public function getConfirmed(): ?bool
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool|null $confirmed User's account confirmation status
     *
     * @return $this
     */
    public function setConfirmed(?bool $confirmed): static
    {
        if (is_null($confirmed)) {
            throw new InvalidArgumentException('non-nullable confirmed cannot be null');
        }
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets isIcq
     *
     * @return bool|null
     */
    public function getIsIcq(): ?bool
    {
        return $this->container['isIcq'];
    }

    /**
     * Sets isIcq
     *
     * @param bool|null $isIcq If true, indicates an ICQ user instead of an AIM user.
     *
     * @return $this
     */
    public function setIsIcq(?bool $isIcq): static
    {
        if (is_null($isIcq)) {
            throw new InvalidArgumentException('non-nullable isIcq cannot be null');
        }
        $this->container['isIcq'] = $isIcq;

        return $this;
    }

    /**
     * Gets suspendedStatus
     *
     * @return string|null
     */
    public function getSuspendedStatus(): ?string
    {
        return $this->container['suspendedStatus'];
    }

    /**
     * Sets suspendedStatus
     *
     * @param string|null $suspendedStatus User's suspended status
     *
     * @return $this
     */
    public function setSuspendedStatus(?string $suspendedStatus): static
    {
        if (is_null($suspendedStatus)) {
            throw new InvalidArgumentException('non-nullable suspendedStatus cannot be null');
        }
        $this->container['suspendedStatus'] = $suspendedStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


