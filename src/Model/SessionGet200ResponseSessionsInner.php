<?php
/**
 * SessionGet200ResponseSessionsInner
 *
 * PHP version 8.1
 *
 * @package  EpicKitty\Ras
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * User Management API
 *
 * API that provides management functionality for Retro AIM Server operators.
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EpicKitty\Ras\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EpicKitty\Ras\ObjectSerializer;

/**
 * SessionGet200ResponseSessionsInner Class Doc Comment
 *
 * @package  EpicKitty\Ras
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class SessionGet200ResponseSessionsInner implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_session_get_200_response_sessions_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'screenName' => 'string',
        'onlineSeconds' => 'float',
        'awayMessage' => 'string',
        'idleSeconds' => 'float',
        'isIcq' => 'bool',
        'remoteAddr' => 'string',
        'remotePort' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'screenName' => null,
        'onlineSeconds' => null,
        'awayMessage' => null,
        'idleSeconds' => null,
        'isIcq' => null,
        'remoteAddr' => null,
        'remotePort' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'screenName' => false,
        'onlineSeconds' => false,
        'awayMessage' => false,
        'idleSeconds' => false,
        'isIcq' => false,
        'remoteAddr' => false,
        'remotePort' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'screenName' => 'screen_name',
        'onlineSeconds' => 'online_seconds',
        'awayMessage' => 'away_message',
        'idleSeconds' => 'idle_seconds',
        'isIcq' => 'is_icq',
        'remoteAddr' => 'remote_addr',
        'remotePort' => 'remote_port'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'screenName' => 'setScreenName',
        'onlineSeconds' => 'setOnlineSeconds',
        'awayMessage' => 'setAwayMessage',
        'idleSeconds' => 'setIdleSeconds',
        'isIcq' => 'setIsIcq',
        'remoteAddr' => 'setRemoteAddr',
        'remotePort' => 'setRemotePort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'screenName' => 'getScreenName',
        'onlineSeconds' => 'getOnlineSeconds',
        'awayMessage' => 'getAwayMessage',
        'idleSeconds' => 'getIdleSeconds',
        'isIcq' => 'getIsIcq',
        'remoteAddr' => 'getRemoteAddr',
        'remotePort' => 'getRemotePort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('screenName', $data ?? [], null);
        $this->setIfExists('onlineSeconds', $data ?? [], null);
        $this->setIfExists('awayMessage', $data ?? [], null);
        $this->setIfExists('idleSeconds', $data ?? [], null);
        $this->setIfExists('isIcq', $data ?? [], null);
        $this->setIfExists('remoteAddr', $data ?? [], null);
        $this->setIfExists('remotePort', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id User's unique identifier.
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets screenName
     *
     * @return string|null
     */
    public function getScreenName(): ?string
    {
        return $this->container['screenName'];
    }

    /**
     * Sets screenName
     *
     * @param string|null $screenName User's AIM screen name or ICQ UIN.
     *
     * @return $this
     */
    public function setScreenName(?string $screenName): static
    {
        if (is_null($screenName)) {
            throw new InvalidArgumentException('non-nullable screenName cannot be null');
        }
        $this->container['screenName'] = $screenName;

        return $this;
    }

    /**
     * Gets onlineSeconds
     *
     * @return float|null
     */
    public function getOnlineSeconds(): ?float
    {
        return $this->container['onlineSeconds'];
    }

    /**
     * Sets onlineSeconds
     *
     * @param float|null $onlineSeconds Number of seconds this user session has been online.
     *
     * @return $this
     */
    public function setOnlineSeconds(?float $onlineSeconds): static
    {
        if (is_null($onlineSeconds)) {
            throw new InvalidArgumentException('non-nullable onlineSeconds cannot be null');
        }
        $this->container['onlineSeconds'] = $onlineSeconds;

        return $this;
    }

    /**
     * Gets awayMessage
     *
     * @return string|null
     */
    public function getAwayMessage(): ?string
    {
        return $this->container['awayMessage'];
    }

    /**
     * Sets awayMessage
     *
     * @param string|null $awayMessage User's AIM away message HTML. Empty if the user is not away.
     *
     * @return $this
     */
    public function setAwayMessage(?string $awayMessage): static
    {
        if (is_null($awayMessage)) {
            throw new InvalidArgumentException('non-nullable awayMessage cannot be null');
        }
        $this->container['awayMessage'] = $awayMessage;

        return $this;
    }

    /**
     * Gets idleSeconds
     *
     * @return float|null
     */
    public function getIdleSeconds(): ?float
    {
        return $this->container['idleSeconds'];
    }

    /**
     * Sets idleSeconds
     *
     * @param float|null $idleSeconds Number of seconds this user session has been idle. 0 if not idle.
     *
     * @return $this
     */
    public function setIdleSeconds(?float $idleSeconds): static
    {
        if (is_null($idleSeconds)) {
            throw new InvalidArgumentException('non-nullable idleSeconds cannot be null');
        }
        $this->container['idleSeconds'] = $idleSeconds;

        return $this;
    }

    /**
     * Gets isIcq
     *
     * @return bool|null
     */
    public function getIsIcq(): ?bool
    {
        return $this->container['isIcq'];
    }

    /**
     * Sets isIcq
     *
     * @param bool|null $isIcq If true, indicates an ICQ user instead of an AIM user.
     *
     * @return $this
     */
    public function setIsIcq(?bool $isIcq): static
    {
        if (is_null($isIcq)) {
            throw new InvalidArgumentException('non-nullable isIcq cannot be null');
        }
        $this->container['isIcq'] = $isIcq;

        return $this;
    }

    /**
     * Gets remoteAddr
     *
     * @return string|null
     */
    public function getRemoteAddr(): ?string
    {
        return $this->container['remoteAddr'];
    }

    /**
     * Sets remoteAddr
     *
     * @param string|null $remoteAddr Remote IP address of the user's connection to BOS or TOC
     *
     * @return $this
     */
    public function setRemoteAddr(?string $remoteAddr): static
    {
        if (is_null($remoteAddr)) {
            throw new InvalidArgumentException('non-nullable remoteAddr cannot be null');
        }
        $this->container['remoteAddr'] = $remoteAddr;

        return $this;
    }

    /**
     * Gets remotePort
     *
     * @return int|null
     */
    public function getRemotePort(): ?int
    {
        return $this->container['remotePort'];
    }

    /**
     * Sets remotePort
     *
     * @param int|null $remotePort Remote port number of the user's connection to BOS or TOC
     *
     * @return $this
     */
    public function setRemotePort(?int $remotePort): static
    {
        if (is_null($remotePort)) {
            throw new InvalidArgumentException('non-nullable remotePort cannot be null');
        }
        $this->container['remotePort'] = $remotePort;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


